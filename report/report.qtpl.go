// This file is automatically generated by qtc from "report.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line report/report.qtpl:1
package report

//line report/report.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line report/report.qtpl:1
import (
	"strconv"
	"strings"
)

//line report/report.qtpl:6
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line report/report.qtpl:7
type Page struct {
	Title       string
	Connections []uint64
}

//line report/report.qtpl:13
func (p *Page) streamtitle(qw422016 *qt422016.Writer) {
//line report/report.qtpl:13
qw422016.E().S(p.Title) }

//line report/report.qtpl:13
//line report/report.qtpl:13
func (p *Page) writetitle(qq422016 qtio422016.Writer) {
	//line report/report.qtpl:13
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line report/report.qtpl:13
	p.streamtitle(qw422016)
	//line report/report.qtpl:13
	qt422016.ReleaseWriter(qw422016)
//line report/report.qtpl:13
}

//line report/report.qtpl:13
func (p *Page) title() string {
	//line report/report.qtpl:13
	qb422016 := qt422016.AcquireByteBuffer()
	//line report/report.qtpl:13
	p.writetitle(qb422016)
	//line report/report.qtpl:13
	qs422016 := string(qb422016.B)
	//line report/report.qtpl:13
	qt422016.ReleaseByteBuffer(qb422016)
	//line report/report.qtpl:13
	return qs422016
//line report/report.qtpl:13
}

//line report/report.qtpl:15
func (p *Page) streamconnectionsChart(qw422016 *qt422016.Writer) {
	//line report/report.qtpl:15
	qw422016.N().S(`
	<script>
	$(function () {
    			$('#container').highcharts({
                				title: {
                					text: 'Connections',
                					x: -20 //center
                				},
                				subtitle: {
                					text: 'subtitle',
                					x: -20
                				},
                				xAxis: {
                					tickInterval: 500, // one week
                					tickWidth: 0,
                					gridLineWidth: 1,
                					labels: {
                						align: 'left',
                						x: 3,
                						y: -3
                					}
                				},
                				yAxis: {
                					title: {
                						text: 'Number'
                					},
                					plotLines: [{
                						value: 0,
                						width: 1,
                						color: '#808080'
                					}]
                				},
                				legend: {
                					layout: 'vertical',
                					align: 'right',
                					verticalAlign: 'middle',
                					borderWidth: 0
                				},
                				series: [{
                					name: 'Qps',
                					data: [`)
	//line report/report.qtpl:55
	StreamSliceToString(qw422016, p.Connections)
	//line report/report.qtpl:55
	qw422016.N().S(`]
                				}]
                			});
    		});
    </script>
   	<div id="container" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
`)
//line report/report.qtpl:61
}

//line report/report.qtpl:61
func (p *Page) writeconnectionsChart(qq422016 qtio422016.Writer) {
	//line report/report.qtpl:61
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line report/report.qtpl:61
	p.streamconnectionsChart(qw422016)
	//line report/report.qtpl:61
	qt422016.ReleaseWriter(qw422016)
//line report/report.qtpl:61
}

//line report/report.qtpl:61
func (p *Page) connectionsChart() string {
	//line report/report.qtpl:61
	qb422016 := qt422016.AcquireByteBuffer()
	//line report/report.qtpl:61
	p.writeconnectionsChart(qb422016)
	//line report/report.qtpl:61
	qs422016 := string(qb422016.B)
	//line report/report.qtpl:61
	qt422016.ReleaseByteBuffer(qb422016)
	//line report/report.qtpl:61
	return qs422016
//line report/report.qtpl:61
}

//line report/report.qtpl:63
func StreamPrintPage(qw422016 *qt422016.Writer, p *Page) {
	//line report/report.qtpl:63
	qw422016.N().S(`
<html>
	<head>
		<title>`)
	//line report/report.qtpl:66
	p.streamtitle(qw422016)
	//line report/report.qtpl:66
	qw422016.N().S(`</title>
		<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
		<script type="text/javascript" src="https://code.highcharts.com/highcharts.js"></script>
		<script type="text/javascript" src="https://code.highcharts.com/modules/exporting.js"></script>
	</head>
	 <body>
		`)
	//line report/report.qtpl:72
	p.streamconnectionsChart(qw422016)
	//line report/report.qtpl:72
	qw422016.N().S(`
	</body>
</html>
`)
//line report/report.qtpl:75
}

//line report/report.qtpl:75
func WritePrintPage(qq422016 qtio422016.Writer, p *Page) {
	//line report/report.qtpl:75
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line report/report.qtpl:75
	StreamPrintPage(qw422016, p)
	//line report/report.qtpl:75
	qt422016.ReleaseWriter(qw422016)
//line report/report.qtpl:75
}

//line report/report.qtpl:75
func PrintPage(p *Page) string {
	//line report/report.qtpl:75
	qb422016 := qt422016.AcquireByteBuffer()
	//line report/report.qtpl:75
	WritePrintPage(qb422016, p)
	//line report/report.qtpl:75
	qs422016 := string(qb422016.B)
	//line report/report.qtpl:75
	qt422016.ReleaseByteBuffer(qb422016)
	//line report/report.qtpl:75
	return qs422016
//line report/report.qtpl:75
}

//line report/report.qtpl:78
func StreamSliceToString(qw422016 *qt422016.Writer, sl []uint64) {
	//line report/report.qtpl:80
	str := []string{}
	for _, v := range sl {
		str = append(str, strconv.FormatInt(int64(v), 10))
	}

	//line report/report.qtpl:85
	qw422016.N().S(strings.Join(str[:], ","))
//line report/report.qtpl:86
}

//line report/report.qtpl:86
func WriteSliceToString(qq422016 qtio422016.Writer, sl []uint64) {
	//line report/report.qtpl:86
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line report/report.qtpl:86
	StreamSliceToString(qw422016, sl)
	//line report/report.qtpl:86
	qt422016.ReleaseWriter(qw422016)
//line report/report.qtpl:86
}

//line report/report.qtpl:86
func SliceToString(sl []uint64) string {
	//line report/report.qtpl:86
	qb422016 := qt422016.AcquireByteBuffer()
	//line report/report.qtpl:86
	WriteSliceToString(qb422016, sl)
	//line report/report.qtpl:86
	qs422016 := string(qb422016.B)
	//line report/report.qtpl:86
	qt422016.ReleaseByteBuffer(qb422016)
	//line report/report.qtpl:86
	return qs422016
//line report/report.qtpl:86
}
