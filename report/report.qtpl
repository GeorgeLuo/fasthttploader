{% import (
    "strings"
    "strconv"
    "sync"
    "sort"
) %}

{% code
type Page struct {
    // Title displayed in title of generated report
    Title string

    // Step is measured in ms and used for TickInterval in charts
    Step int

    sync.Mutex
    Connections []uint64
	RequestSum []uint64
	Errors []uint64
	Timeouts []uint64
	Qps []uint64
	RequestDuration map[float64][]float64
}

type seriesFunc func() string
%}

{% func (p *Page) title() %}{%s p.Title %}{% endfunc %}

{% func (p *Page) UpdateRequestDuration (d map[float64]float64) %}
	{% code
		for k, v := range d {
			if _, ok := p.RequestDuration[k]; !ok {
				p.RequestDuration[k] = make([]float64, 0)
			}

			p.RequestDuration[k] = append(p.RequestDuration[k], v)
		}
	%}
{% endfunc %}

{% func PrintPage(p *Page) %}
<html>
	<head>
		<title>{%= p.title() %}</title>
		<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
		<script type="text/javascript" src="https://code.highcharts.com/highcharts.js"></script>
		<script type="text/javascript" src="https://code.highcharts.com/modules/exporting.js"></script>
	</head>
	 <body>
		{%= p.simpleChart("connections", p.connectionSeries) %}
		{%= p.simpleChart("qps", p.qpsSeries) %}
		{%= p.simpleChart("errors-vs-timeouts", p.errorSeries) %}
		{%= p.simpleChart("latency", p.durationSeries) %}
	</body>
</html>
{% endfunc %}

{% stripspace %}
{% func Uint64SliceToString(sl []uint64) %}
    {% code
    str := []string{}
    for _, v := range sl {
    	str = append(str, strconv.FormatInt(int64(v), 10))
    }
    %}
    {%s= strings.Join(str[:],",") %}
{% endfunc %}
{% endstripspace %}

{% stripspace %}
{% func Float64SliceToString(sl []float64) %}
    {% code
    str := []string{}
    for _, v := range sl {
    	str = append(str, strconv.FormatFloat(v, 'f', 8, 64))
    }
    %}
    {%s= strings.Join(str[:],",") %}
{% endfunc %}
{% endstripspace %}

{% func (p *Page) simpleChart(title string, fn seriesFunc) %}
	<script>
	$(function () {
    			$('#{%s= title %}').highcharts({
                				title: {
                					text: '{%s= strings.Title(title) %}',
                					x: -20 //center
                				},
                				xAxis: {
                					tickInterval: {%d= p.Step %},
                					tickWidth: 0,
                					gridLineWidth: 1,
                					labels: {
                						align: 'left',
                						x: 3,
                						y: -3
                					}
                				},
                				yAxis: {
                					plotLines: [{
                						value: 0,
                						width: 1,
                						color: '#808080'
                					}]
                				},
                				legend: {
                					layout: 'vertical',
                					align: 'right',
                					verticalAlign: 'middle',
                					borderWidth: 0
                				},
                				series: {%s= fn() %}
                			});
    		});
    </script>
   	<div id="{%s= title %}" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
{% endfunc %}

{% func (p *Page) connectionSeries()  %}
	[{
		name: 'Connections',
		data: [{%= Uint64SliceToString(p.Connections) %}]
	}]
{% endfunc %}

{% func (p *Page) qpsSeries() %}
	[{
		name: 'Qps',
		data: [{%= Uint64SliceToString(p.Qps) %}]
	}]
{% endfunc %}

{% func (p *Page) errorSeries() %}
	[{
		name: 'Errors',
		data: [{%= Uint64SliceToString(p.Errors) %}]
	},{
		name: 'Timeouts',
		data: [{%= Uint64SliceToString(p.Timeouts) %}]
	}]
{% endfunc %}

{% stripspace %}
{% func (p *Page) durationSeries() %}
	[
    {% code
		var keys []float64
        for k := range p.RequestDuration {
            keys = append(keys, k)
        }
        sort.Float64s(keys)
	%}
	{% for i, k := range keys %}
		{
			name: '{%f= k %}',
			data: [{%= Float64SliceToString(p.RequestDuration[k]) %}]
		}
		{% if i + 1 < len(keys) %},{% endif %}
	{% endfor %}
	]
{% endfunc %}
{% endstripspace %}